%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 10000 10000
%%Title: Growth (Structures of Nature)
%%Creator: Mya Macke

% quick false and true
/t true def
/f false def

% variables
    % number of iterations
    /Order 4 def

    % rando settings
    /AngleRando? t def
    /LengthRando? t def
    /ColorRando? t def
    /TickRando? f def
    /SetSeed? f def
    /Seed? 0 def

    % scaling factor
    /ScaleFactor 0.9 def
    /UniformScale 10 def

    % turning angle
    /Theta 30 def
    /ThetaVariance 5 def

    % line length
    /Length 10 def
    /LengthVariance 3 def
    /Width 1.5 def

    % color
    /Red 103 def
    /Blue 66 def
    /Green 21 def

    % starting point
    /XX 2500 def
    /YY 2500 def
    /InitialAngle 60 def

% custom functions
    % scaling
    /Scale {//ScaleFactor dup scale} bind def

    % set seed
    SetSeed? {
        Seed? srand
        /TickRando? false def
    } if
    TickRando? {
        realtime srand
    } if

    % angle
    /Angle [
        AngleRando? {
            {rand //ThetaVariance 2 mul 1 add mod //ThetaVariance sub //Theta add} 
            aload pop
        } {
            {//Theta}
            aload pop
        } ifelse
    ] cvx bind def

    % percentage (operator)
    /Chance {
        rand 100 mod exch lt
    } bind def

    % color variance
    /CVar {
        rand 151 mod 1000 div .075 sub add
    } bind def

    % set color
    /RGB [
        ColorRando? {
            {//Red CVar //Green CVar //Blue CVar setrgbcolor} 
            aload pop
        } {
            {//Red //Green //Blue setrgbcolor}
            aload pop
        } ifelse
    ] cvx bind def

    % length variance
    /LVar [
        LengthRando? {
            {rand //LengthVariance 2 mul 1 add mod //LengthVariance sub add} aload pop
        } if
    ] cvx bind def

    % decrement by 1
    /decr {1 sub} bind def

    % make n copies on top of stack
    /ndup {{dup} repeat} bind def

    % branching
    /¿ {currentpoint stroke moveto gsave} bind def
    /? {stroke grestore} bind def

    % rotations
    /+ {Angle rotate} bind def
    /- {Angle neg rotate} bind def
    /+or- {50 Chance {+} {-} ifelse} def
    /s+ {Angle 2 div rotate} bind def
    /s- {Angle 2 div neg rotate} bind def
    /s+or- {50 Chance {s+} {s-} ifelse} def

    % # of fs
    /nF {{F} repeat} bind def

% algorithm
    % forward line
    /F {
        Scale
        RGB
        //Length LVar 0 rlineto
        pop
    } bind def

    % leaf blob
    /B {
        Scale
        % heart-ish shape with bezier curves
        pop
    } bind def

    % equation T -> FT or F[+/-Y]T or Y (40:40:20)
    /T {
        dup 0 ne {
            decr
            80 Chance {
                50 Chance {
                    2 ndup
                    F T
                } {
                    3 ndup
                    F ¿ +or- Y ? T
                } ifelse
            } {
                1 ndup
                Y
            } ifelse
        } if pop
    } bind def

    % equation Y -> F[-L](scale)F[+L]Y
    /Y {
        dup 0 ne {
            decr 5 ndup
            F ¿ - L ? Scale F ¿ + L ? Y
        } if pop
    } bind def

    % equation L -> BL or B[+/-(0.5 scale)L]L (70:30)
    /L {
        dup 0 ne {
            70 Chance {
                2 ndup
                B L
            } {
                3 ndup
                B ¿ +or- 0.5 Scale L ? L
            } ifelse
        } if pop
    } bind def

    % axiom -> T
    /Start {
        //InitialAngle rotate
        1 ndup
        T
        pop
    } bind def

% drawing
    newpath
        % line chars
        1 setlinecap
        1 setlinejoin
        //Width setlinewidth

        % move to start
        //XX //YY moveto

        % uniform scaling
        //UniformScale dup scale

        Order Start
    stroke

    showpage

%%EOF